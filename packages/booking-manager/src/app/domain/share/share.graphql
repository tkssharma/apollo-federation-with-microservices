scalar Date

type Share @key (fields: "id"){
	id: ID!
	home: Home
  price: Float
	initial_price: Float
  count: Float
	is_available: String!
  created_at: Date
  updated_at: Date
}

extend type Home @key(fields: "id") {
  id: ID! @external
}

extend type User @key(fields: "id") {
  id: ID! @external
}
type HomeCount {
  count: Float
}

type Query {
	shares: [Share!]
	share(id: ID): [Share!]
  getAllShareForHome(homeId: ID): [Share!]
  getActiveShareCountForHome(homeId:ID): HomeCount!
}

input ShareInput {
	home_id: String!
  price: Float
	initial_price: Float
}

input UpdateShareInput {
	home_id: String!
  share_id: String!
  price: Float
	initial_price: Float
}

input RemoveShareInput {
	home_id: String!
  share_ids: [String!]!
}

input AddNewShareInput {
	home_id: String!
  share_id: String!
}

type Mutation {
	createShareForHome(payload: ShareInput!): Share
  addNewShareForHome(payload: AddNewShareInput!): Share
  updateShareForHome(payload: UpdateShareInput!): Share
	removeSharesForHome(payload: RemoveShareInput!):  Boolean!
}