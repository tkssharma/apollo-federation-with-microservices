scalar Date

type Booking {
	id: ID!
	user: User @provides(fields: "username")
  user_id: User
	invoice_id: String!
	home: Home @provides(fields: "name")
  home_id: Home
	start_date: Date!
	end_date: Date!
	status: String!
  created_at: Date
  updated_at: Date
}

extend type Home @key(fields: "id") {
  id: ID! @external
  name: String! @external
  bookings: [Booking]
}

extend type User @key(fields: "id") {
  id: ID! @external
  username: String! @external
  bookings:[Booking]
}

type Query {
	bookings: [Booking!]
	allHomeBookings(id: ID): [Booking!]
	booking(id: ID): Booking!
}

input BookingInput {
	invoice_id: String!
	home_id: String!
	start_date: String!
	end_date: String!
	status: String!
}

type Mutation {
	createBooking(payload: BookingInput!): Booking
	updateBooking(id: ID!, payload: BookingInput!): Booking
}