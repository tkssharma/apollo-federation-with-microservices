scalar Date

type Booking @key (fields: "id"){
	id: ID!
	user: User
	invoice_id: String!
	home: Home
	start_date: Date!
	end_date: Date!
	status: String!
  created_at: Date
  updated_at: Date
  shares: Float!
}

extend type Home @key(fields: "id") {
  id: ID! @external
}

extend type User @key(fields: "id") {
  id: ID! @external
}

type Query {
	bookings: [Booking!]
	booking(id: ID): Booking!
  getAllCustomerBookings(customerId: ID): [Booking!]
}

input CreateBookingInput {
	invoice_id: String!
  user_id: String!
	home_id: String!
	start_date: String!
	end_date: String!
  shares: Float!
}

input UpdateBookingInput {
	invoice_id: String
	start_date: String
	end_date: String
	status: String
  shares: Float
}

type Mutation {
	createBooking(payload: CreateBookingInput!): Booking
	updateBooking(id: ID!, payload: UpdateBookingInput!): Booking
  updateBookingStatus(id: ID!, status: String!): Booking
}